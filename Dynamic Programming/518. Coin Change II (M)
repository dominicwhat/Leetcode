class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        dp = [[0 if i!=0 else 1 for j in range(len(coins) + 1)] for i in range(amount+1)]

        for i in range(1, amount+1):
            for j in range(1, len(coins)+1):
                if i- coins[j-1] < 0:
                    dp[i][j] = dp[i][j-1]
                else:
                    dp[i][j] = dp[i][j-1] + dp[i-coins[j-1]][j] 

        return dp[-1][-1]  


# dp = [[0 if i!=0 else 1 for j in range(len(coins) + 1)] for i in range(amount+1)]
# dp[i][j], where i represents the amount, and j represents whether the first j coins are included or not, signifies the minimum number of coins from the set 1 to j required to reach the amount i.
# Initialize dp. If amount = 0, then set dp[0][j] = 1. Conversely, if coin = 0, then set dp[i][j] = 0.
# The inner list represents columns, while the outer list represents rows.

# For the j-th coin, we consider its value as coins[j-1] rather than coins[j].

# State transition equation: 
# dp[i][j] = dp[i][j-1] + dp[i-coins[j-1]][j], i-coins[j-1] >= 0
# dp[i][j] = dp[i][j-1], o.w.

# Follow-up:
# 1. Is it possible to interchange the rows and columns in dp for amount and coins?
# 2. How can we redesign the solution using one-dimensional dp and reduce the space complexity to O(N+1), where N is the total number of coins? (implementing scrolling array)
# 3. How can we solve the problem using a recursive approach along with caching?

# https://leetcode.com/problems/coin-change-ii/description/
